// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package grammar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1da08881DecodeLab02PkgGrammar(in *jlexer.Lexer, out *Grammar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "terminals":
			if in.IsNull() {
				in.Skip()
				out.Terminals = nil
			} else {
				in.Delim('[')
				if out.Terminals == nil {
					if !in.IsDelim(']') {
						out.Terminals = make([]string, 0, 4)
					} else {
						out.Terminals = []string{}
					}
				} else {
					out.Terminals = (out.Terminals)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Terminals = append(out.Terminals, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "non_terminals":
			if in.IsNull() {
				in.Skip()
				out.NonTerminals = nil
			} else {
				in.Delim('[')
				if out.NonTerminals == nil {
					if !in.IsDelim(']') {
						out.NonTerminals = make([]string, 0, 4)
					} else {
						out.NonTerminals = []string{}
					}
				} else {
					out.NonTerminals = (out.NonTerminals)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.NonTerminals = append(out.NonTerminals, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "productions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Productions = make(map[string]Production)
				} else {
					out.Productions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 Production
					(v3).UnmarshalEasyJSON(in)
					(out.Productions)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "start":
			out.Start = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1da08881EncodeLab02PkgGrammar(out *jwriter.Writer, in Grammar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"terminals\":"
		out.RawString(prefix[1:])
		if in.Terminals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Terminals {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"non_terminals\":"
		out.RawString(prefix)
		if in.NonTerminals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.NonTerminals {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"productions\":"
		out.RawString(prefix)
		if in.Productions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Productions {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				(v8Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.String(string(in.Start))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Grammar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1da08881EncodeLab02PkgGrammar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Grammar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1da08881EncodeLab02PkgGrammar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Grammar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1da08881DecodeLab02PkgGrammar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Grammar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1da08881DecodeLab02PkgGrammar(l, v)
}
