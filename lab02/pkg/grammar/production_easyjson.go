// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package grammar

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB87d3e31DecodeLab02PkgGrammar(in *jlexer.Lexer, out *Production) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "left_part":
			if in.IsNull() {
				in.Skip()
				out.LeftPart = nil
			} else {
				in.Delim('[')
				if out.LeftPart == nil {
					if !in.IsDelim(']') {
						out.LeftPart = make([]string, 0, 4)
					} else {
						out.LeftPart = []string{}
					}
				} else {
					out.LeftPart = (out.LeftPart)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.LeftPart = append(out.LeftPart, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "right_parts":
			if in.IsNull() {
				in.Skip()
				out.RightParts = nil
			} else {
				in.Delim('[')
				if out.RightParts == nil {
					if !in.IsDelim(']') {
						out.RightParts = make([][]string, 0, 2)
					} else {
						out.RightParts = [][]string{}
					}
				} else {
					out.RightParts = (out.RightParts)[:0]
				}
				for !in.IsDelim(']') {
					var v2 []string
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]string, 0, 4)
							} else {
								v2 = []string{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 string
							v3 = string(in.String())
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.RightParts = append(out.RightParts, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB87d3e31EncodeLab02PkgGrammar(out *jwriter.Writer, in Production) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"left_part\":"
		out.RawString(prefix[1:])
		if in.LeftPart == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.LeftPart {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"right_parts\":"
		out.RawString(prefix)
		if in.RightParts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.RightParts {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v8, v9 := range v7 {
						if v8 > 0 {
							out.RawByte(',')
						}
						out.String(string(v9))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Production) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB87d3e31EncodeLab02PkgGrammar(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Production) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB87d3e31EncodeLab02PkgGrammar(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Production) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB87d3e31DecodeLab02PkgGrammar(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Production) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB87d3e31DecodeLab02PkgGrammar(l, v)
}
